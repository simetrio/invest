@page "/operations"

@using MediatR
@using Invest.TaxCalculator.BusinessLogic.Operations
@using Invest.TaxCalculator.BusinessLogic.Operations.Dto
@using Invest.TaxCalculator.BusinessLogic.Countries
@using Invest.TaxCalculator.BusinessLogic.Reports

@inject Mediator Mediator

<PageTitle>Операции</PageTitle>

<h1>Операции</h1>

<table>
    <tr>
        <td>Ид:</td>
        <td>
            <input @bind="@_id" @bind:event="oninput"/>
        </td>
    </tr>
    <tr>
        <td>Ид родителя:</td>
        <td>
            <input @bind="@_parentId" @bind:event="oninput"/>
        </td>
    </tr>
    <tr>
        <td>Тикер:</td>
        <td>
            <input @bind="@_ticker" @bind:event="oninput" placeholder="CDV"/>
        </td>
    </tr>
    <tr>
        <td>Дата и время:</td>
        <td>
            <input @bind="@_dateTime" @bind:event="oninput" placeholder="01.01.2000 12:00"/>
        </td>
    </tr>
    <tr>
        <td>Тип:</td>
        <td>
            <input @bind="@_type" @bind:event="oninput"/>
        </td>
    </tr>
    <tr>
        <td>Кол-во:</td>
        <td>
            <input @bind="@_count" @bind:event="oninput"/>
        </td>
    </tr>
    <tr>
        <td>Цена:</td>
        <td>
            <input @bind="@_price" @bind:event="oninput" placeholder="151,16"/>
        </td>
    </tr>
    <tr>
        <td>Курс доллара:</td>
        <td>
            <input @bind="@_dollarPrice" @bind:event="oninput" placeholder="71,25"/>
        </td>
    </tr>
    <tr>
        <td>Страна:</td>
        <td>
            <input @bind="@_country" @bind:event="oninput"/>
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <button @onclick="Create">Добавить</button>
        </td>
    </tr>
    <tr>
        <td colspan="2">@_error</td>
    </tr>
</table>

<hr/>

<table>
    <tr>
        <td>Создать отчет за:</td>
        <td>
            <input @bind="@_year" @bind:event="oninput"/>
        </td>
        <td>
            <button @onclick="CreateReport">Создать</button>
        </td>
    </tr>
</table>

@foreach (var year in _operations.Years)
{
    <hr/>

    <h4>Операции за @year год</h4>

    <table width="100%">
        <thead>
        <tr>
            <th>Ид</th>
            <th>Ид родителя</th>
            <th>Тикер</th>
            <th>Дата и время</th>
            <th>Тип</th>
            <th>Кол-во</th>
            <th>Цена</th>
            <th>Курс доллара</th>
            <th>Страна</th>
            <th>&nbsp;</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var operation in _operations.OperationsByYear[year])
        {
            <tr>
                <td>@operation.Id</td>
                <td>@operation.ParentId</td>
                <td>@operation.Ticker</td>
                <td>@operation.DateTime</td>
                <td>@operation.Type</td>
                <td>@operation.Count</td>
                <td>@operation.Price</td>
                <td>@operation.DollarPrice</td>
                <td>@operation.Country</td>
                <td>
                    <button @onclick="@(_ => Delete(operation.Id))">&#10060;</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private OperationsDto _operations = new();
    private string _id = "";
    private string _parentId = "";
    private string _ticker = "";
    private string _dateTime = "";
    private string _type = "";
    private string _count = "";
    private string _price = "";
    private string _dollarPrice = "";
    private string _country = "";
    private string _error = "";
    private string _year = "";

    protected override async Task OnInitializedAsync()
    {
        await ReadOperations();
    }

    private async Task Create()
    {
        try
        {
            var operation = GetOperation();
            await Mediator.Send(new CreateOperationCommand(operation));

            ClearOperation();
            await ReadOperations();
        }
        catch (Exception e)
        {
            _error = e.Message;
            Console.WriteLine(e);
        }
    }

    private async Task CreateReport()
    {
        try
        {
            var year = int.Parse(_year);

            await Mediator.Send(new CreateReportCommand(year));

            _year = "";
        }
        catch (Exception e)
        {
            _error = e.Message;
            Console.WriteLine(e);
        }
    }

    private async Task Delete(string id)
    {
        try
        {
            await Mediator.Send(new DeleteOperationCommand(id));
            await ReadOperations();
        }
        catch (Exception e)
        {
            _error = e.Message;
            Console.WriteLine(e);
        }
    }

    private async Task ReadOperations()
    {
        _operations = await Mediator.Send(new ReadOperationsCommand());
    }

    private OperationDto GetOperation()
    {
        return new OperationDto
        {
            Id = _id,
            ParentId = _parentId,
            Ticker = _ticker,
            DateTime = DateTime.Parse(_dateTime),
            Type = Enum.Parse<OperationType>(_type),
            Count = int.Parse(_count),
            Price = decimal.Parse(_price.Replace(".", ",")),
            DollarPrice = decimal.Parse(_dollarPrice.Replace(".", ",")),
            Country = Enum.Parse<Country>(_country),
        };
    }

    private void ClearOperation()
    {
        _id = "";
        _parentId = "";
        _ticker = "";
        _dateTime = "";
        _type = "";
        _count = "";
        _price = "";
        _dollarPrice = "";
        _country = "";
    }

}