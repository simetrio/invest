@page "/operations"

@using MediatR
@using Invest.TaxCalculator.BusinessLogic.Operations
@using Invest.TaxCalculator.BusinessLogic.Operations.Dto
@using Invest.TaxCalculator.BusinessLogic.Countries

@inject Mediator Mediator

<PageTitle>Операции</PageTitle>

<h1>Операции</h1>

<table>
    <tr>
        <td>Ид:</td>
        <td>
            <input @bind="@_id" @bind:event="oninput"/>
        </td>
    </tr>
    <tr>
        <td>Ид родителя:</td>
        <td>
            <input @bind="@_parentId" @bind:event="oninput"/>
        </td>
    </tr>
    <tr>
        <td>Тикер:</td>
        <td>
            <input @bind="@_ticker" @bind:event="oninput" placeholder="CDV"/>
        </td>
    </tr>
    <tr>
        <td>Дата и время:</td>
        <td>
            <input @bind="@_dateTime" @bind:event="oninput" placeholder="01.01.2000 12:00"/>
        </td>
    </tr>
    <tr>
        <td>Тип:</td>
        <td>
            <input @bind="@_type" @bind:event="oninput"/>
        </td>
    </tr>
    <tr>
        <td>Кол-во:</td>
        <td>
            <input @bind="@_count" @bind:event="oninput"/>
        </td>
    </tr>
    <tr>
        <td>Цена:</td>
        <td>
            <input @bind="@_price" @bind:event="oninput" placeholder="151.16"/>
        </td>
    </tr>
    <tr>
        <td>Курс доллара:</td>
        <td>
            <input @bind="@_dollarPrice" @bind:event="oninput" placeholder="71.25"/>
        </td>
    </tr>
    <tr>
        <td>Страна:</td>
        <td>
            <input @bind="@_country" @bind:event="oninput"/>
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <button @onclick="Create">Добавить</button>
        </td>
    </tr>
    <tr>
        <td colspan="2">@_error</td>
    </tr>
</table>

<hr/>

@foreach (var operation in _operations!.Items)
{
    <div>@operation.Ticker</div>
}

@code {
    private OperationsDto? _operations = new();
    private string _id = "";
    private string _parentId = "";
    private string _ticker = "";
    private string _dateTime = "";
    private string _type = "";
    private string _count = "";
    private string _price = "";
    private string _dollarPrice = "";
    private string _country = "";
    private string _error = "";

    protected override async Task OnInitializedAsync()
    {
        _operations = await Mediator.Send(new ReadOperationsCommand());
    }

    private async Task Create()
    {
        try
        {
            var operation = new OperationDto
            {
                Id = _id,
                ParentId = _parentId,
                Ticker = _ticker,
                DateTime = DateTime.Parse(_dateTime), 
                Type = Enum.Parse<OperationType>(_type), 
                Count = int.Parse(_count), 
                Price = decimal.Parse(_price), 
                DollarPrice = decimal.Parse(_dollarPrice), 
                Country = Enum.Parse<Country>(_country),
            };
        
            await Mediator.Send(new CreateOperationCommand(operation));
            _operations = await Mediator.Send(new ReadOperationsCommand()); 
        }
        catch (Exception e)
        {
            _error = e.Message;
            Console.WriteLine(e);
        }
    }

}