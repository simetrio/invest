@page "/operations"

@inject Mediator Mediator

<PageTitle>Операции</PageTitle>

<h1>Операции</h1>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <div>@_error</div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseError"></button>
    </div>
}

<hr/>

<h3>Новая операция</h3>

<div class="row g-3">
    <div class="col-md-4">
        <label for="id" class="form-label">Ид</label>
        <input type="text" class="form-control" id="id" @bind="@_id" @bind:event="oninput">
    </div>
    <div class="col-md-4">
        <label for="parentId" class="form-label">Ид родителя</label>
        <input type="text" class="form-control" id="parentId" @bind="@_parentId" @bind:event="oninput">
    </div>
    <div class="col-md-4">
        <label for="ticker" class="form-label">Тикер</label>
        <input type="text" class="form-control" id="ticker" @bind="@_ticker" @bind:event="oninput" placeholder="CDV">
    </div>
    <div class="col-md-4">
        <label for="dateTime" class="form-label">Дата и время</label>
        <input type="text" class="form-control" id="dateTime" @bind="@_dateTime" @bind:event="oninput" placeholder="01.01.2000 12:00">
    </div>
    <div class="col-md-4">
        <label for="type" class="form-label">Тип</label>
        <select class="form-select mb-3" id="type" @bind="@_type">
            <option value="">-- выберите тип операции</option>
            @foreach (var type in GetTypes<OperationType>())
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
    <div class="col-md-4">
        <label for="country" class="form-label">Страна</label>
        <select class="form-select mb-3" id="country" @bind="@_country">
            <option value="">-- выберите страну</option>
            @foreach (var country in GetTypes<Country>())
            {
                <option value="@country">@country</option>
            }
        </select>
    </div>
    <div class="col-md-4">
        <label for="count" class="form-label">Кол-во</label>
        <input type="text" class="form-control" id="count" @bind="@_count" @bind:event="oninput">
    </div>
    <div class="col-md-4">
        <label for="oninput" class="form-label">Цена</label>
        <input type="text" class="form-control" id="oninput" @bind="@_price" @bind:event="oninput" placeholder="151,16">
    </div>
    <div class="col-md-4">
        <label for="dollarPrice" class="form-label">Курс доллара</label>
        <input type="text" class="form-control" id="dollarPrice" @bind="@_dollarPrice" @bind:event="oninput" placeholder="71,25">
    </div>
    <div class="col-md-12">
        <button class="btn btn-primary" @onclick="Create">Добавить</button>
    </div>
</div>

<hr/>

<div class="row g-3">
    <h3>Новый отчет</h3>

    <div class="col-md-3">
        <input type="text" class="form-control" id="year" @bind="@_year" @bind:event="oninput" placeholder="Укажите год">
    </div>

    <div class="col-md-3">
        <button class="btn btn-primary" @onclick="CreateReport">Добавить</button>
    </div>
</div>

<hr/>

@foreach (var year in _operations.Years)
{
    <h3>Операции за @year год</h3>

    <table class="table table-hover my-5">
        <thead>
        <tr>
            <th>Ид</th>
            <th>Ид родителя</th>
            <th>Тикер</th>
            <th>Дата и время</th>
            <th>Тип</th>
            <th>Кол-во</th>
            <th>Цена</th>
            <th>Доллар</th>
            <th>Страна</th>
            <th>&nbsp;</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var operation in _operations.OperationsByYear[year])
        {
            <tr>
                <td>@operation.Id</td>
                <td>@operation.ParentId</td>
                <td>@operation.Ticker</td>
                <td>@operation.DateTime</td>
                <td>@operation.Type</td>
                <td>@operation.Count</td>
                <td>@operation.Price.ToString("C", _dollar)</td>
                <td>@operation.DollarPrice.ToString("C", _dollar)</td>
                <td>@operation.Country</td>
                <td>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="@(_ => Delete(operation.Id))"></button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private OperationsDto _operations = new();
    private string _id = "";
    private string _parentId = "";
    private string _ticker = "";
    private string _dateTime = "";
    private string _type = "";
    private string _count = "";
    private string _price = "";
    private string _dollarPrice = "";
    private string _country = "";
    private string _error = "";
    private string _year = "";
    private readonly CultureInfo _dollar = CultureInfo.CreateSpecificCulture("en-US");

    protected override async Task OnInitializedAsync()
    {
        await ReadOperations();
    }

    private async Task Create()
    {
        try
        {
            var operation = GetOperation();
            await Mediator.Send(new CreateOperationCommand(operation));

            ClearOperation();
            await ReadOperations();
        }
        catch (Exception e)
        {
            _error = e.Message;
            Console.WriteLine(e);
        }
    }

    private async Task CreateReport()
    {
        try
        {
            var year = int.Parse(_year);

            await Mediator.Send(new CreateReportCommand(year));

            _year = "";
        }
        catch (Exception e)
        {
            _error = e.Message;
            Console.WriteLine(e);
        }
    }

    private async Task Delete(string id)
    {
        try
        {
            await Mediator.Send(new DeleteOperationCommand(id));
            await ReadOperations();
        }
        catch (Exception e)
        {
            _error = e.Message;
            Console.WriteLine(e);
        }
    }

    private void CloseError()
    {
        _error = "";
    }

    private async Task ReadOperations()
    {
        _operations = await Mediator.Send(new ReadOperationsCommand());
    }

    private OperationDto GetOperation()
    {
        return new OperationDto
        {
            Id = _id,
            ParentId = _parentId,
            Ticker = _ticker,
            DateTime = DateTime.Parse(_dateTime),
            Type = Enum.Parse<OperationType>(_type),
            Count = int.Parse(_count),
            Price = decimal.Parse(_price.Replace(".", ",")),
            DollarPrice = decimal.Parse(_dollarPrice.Replace(".", ",")),
            Country = Enum.Parse<Country>(_country),
        };
    }

    private void ClearOperation()
    {
        _id = "";
        _parentId = "";
        _ticker = "";
        _dateTime = "";
        _type = "";
        _count = "";
        _price = "";
        _dollarPrice = "";
        _country = "";
    }

    private string[] GetTypes<T>() where T : Enum
    {
        return Enum.GetNames(typeof(T))
            .OrderBy(x => x)
            .ToArray();
    }

}