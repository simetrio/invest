@page "/transactions"

@inject Mediator Mediator

<PageTitle>Сделки</PageTitle>

<h1>Сделки</h1>

<hr/>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <div>@_error</div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseError"></button>
    </div>
}

@foreach (var transactions in _transactions)
{
    <h3>Сделки за @transactions.Year год</h3>
   
    <table class="table table-hover mt-4">
        <thead>
        <tr>
            <th>Тикер</th>
            <th>Страна</th>
            <th>Тип</th>
            <th>Дата и время</th>
            <th>Операции</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var transaction in transactions.Items)
        {
            <tr>
                <td>@transaction.Ticker</td>
                <td>@transaction.Country</td>
                <td>@transaction.Type</td>
                <td>@transaction.DateTime</td>
                <td>@transaction.Operations.Length</td>
            </tr>
        }
        </tbody>
    </table>
    
    <p class="mb-5">
        <button class="btn btn-primary" @onclick="@(_ => Delete(transactions.Year))">Удалить</button>
    </p>
}

@code {
    private TransactionsDto[] _transactions = Array.Empty<TransactionsDto>();
    private string _error = "";
    private readonly CultureInfo _dollar = CultureInfo.CreateSpecificCulture("en-US");

    protected override async Task OnInitializedAsync()
    {
        await ReadTransactions();
    }

    private async Task Delete(int year)
    {
        try
        {
            await Mediator.Send(new DeleteReportCommand(year));
            await ReadTransactions();
        }
        catch (Exception e)
        {
            _error = e.Message;
            Console.WriteLine(e);
        }
    }

    private void CloseError()
    {
        _error = "";
    }

    private async Task ReadTransactions()
    {
        _transactions = await Mediator.Send(new ReadTransactionsCommand());
    }

}