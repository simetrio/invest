@page "/reports"

@inject Mediator Mediator

<PageTitle>Налоги</PageTitle>

<h1>Налоги</h1>

<hr/>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-danger alert-dismissible" role="alert">
        <div>@_error</div>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close" @onclick="CloseError"></button>
    </div>
}

@foreach (var reports in _reports)
{
    <h3>Налоги за @reports.Year год</h3>

    <table class="table table-hover mt-4">
        <thead>
        <tr>
            <th>Страна</th>
            <th>Тип</th>
            <th>Прибыль</th>
            <th>Ставка налога</th>
            <th>Налог</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var report in reports.Items)
        {
            <tr>
                <td>@report.Country</td>
                <td>@report.Type</td>
                <td>@report.Profit</td>
                <td>@report.TaxPercent</td>
                <td>@report.Tax</td>
            </tr>
        }
        </tbody>
    </table>

    <p class="mb-5">
        <button class="btn btn-primary" @onclick="@(_ => Delete(reports.Year))">Удалить</button>
    </p>
}

@code {
    private ReportDto[] _reports = Array.Empty<ReportDto>();
    private string _error = "";

    protected override async Task OnInitializedAsync()
    {
        await ReadReports();
    }

    private async Task Delete(int year)
    {
        try
        {
            await Mediator.Send(new DeleteReportCommand(year));
            await ReadReports();
        }
        catch (Exception e)
        {
            _error = e.Message;
            Console.WriteLine(e);
        }
    }

    private void CloseError()
    {
        _error = "";
    }

    private async Task ReadReports()
    {
        _reports = await Mediator.Send(new ReadReportsCommand());
    }

}